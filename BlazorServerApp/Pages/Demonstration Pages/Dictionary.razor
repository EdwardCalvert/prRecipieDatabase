@page "/Dictionary"
<h3>Dictionary</h3>
@inject IHttpClientFactory clientFactory
@using BlazorServerApp.Models.v1
@using System.Net.Http.Headers
@using System
@using Newtonsoft.Json


@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
    <p>@result</p>
}
else if (dictionary is null)
{
    <div class="h4">Loading ...</div>
    <div class="col-12"><img src="/loading.gif" alt="LoadingGiff" height="20" /></div>

}
else
{

    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Word</th>
                <th>Definition</th>
                <th>Type</th>

            </tr>
        </thead>
        <tbody>

            @foreach (var word in dictionary)
            {
                <tr>
                    <td>@word.word</td>
                    <td>@nounDefinition</td>
                </tr>
            }



        </tbody>
    </table>
}


@code {
    List<APIResultV1> dictionary;
    string errorString;
    string result;
    string nounDefinition = "";

    protected override async Task OnInitializedAsync()
    {

        try
        {
            result = await SendDictonaryAPIRequest("apple");
            dictionary = JsonConvert.DeserializeObject<List<APIResultV1>>(result);
            errorString = null;
            foreach (var word in dictionary) {

                foreach (var definition in word.meaning.noun)
                {
                    nounDefinition+=definition.definition.ToString()+"\n";
                }

            }

        }
        catch (Exception e)
        {
            errorString += $"There was an error getting our forecast: {e.Message}";
        }
    }

    private static readonly string APIUrl = "https://api.dictionaryapi.dev/api/v1/entries/en/";



    public async Task<string> SendDictonaryAPIRequest(string searchTerm)
    {
        //string result = "";
        using (var client = clientFactory.CreateClient())
        {
            string CallAddress = APIUrl + searchTerm;
            client.BaseAddress = new Uri(CallAddress);
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            HttpResponseMessage response = await client.GetAsync(CallAddress);


            if (response.IsSuccessStatusCode)
            {
                var readTask = response.Content.ReadAsStringAsync().ConfigureAwait(false);
                var rawResponse = readTask.GetAwaiter().GetResult();
                Console.WriteLine(rawResponse);
                return rawResponse;

            }
            else
            {

                errorString = response.StatusCode.ToString();
                return null;
            }
        }

    }


    //    var client = clientFactory.CreateClient();

    //try
    //{
    //    dictionary = await client.GetFromJsonAsync<Rootobject>("https://api.dictionaryapi.dev/api/v2/entries/en/apple");
    //    errorString = null;
    //}
    //catch (Exception e)
    //{
    //    errorString = $"There was an error getting our forecast: {e.Message}";
    //}


}

