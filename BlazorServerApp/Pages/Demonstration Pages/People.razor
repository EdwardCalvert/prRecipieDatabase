
@page "/people"

@using DataLibrary
@using BlazorServerApp.Models
@using Microsoft.Extensions.Configuration
@inject IDataAccess _data
@inject IConfiguration _config

<h3>People</h3>

<h4>Insert New Person</h4>
<EditForm Model="@newPerson" OnValidSubmit="@InsertPerson">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label id="firstNameTextBox">First Name</label>
    <InputText id="firstName" @bind-Value="newPerson.FirstName" />
    <label id="lastNameTextBox">Last Name</label>
    <InputText id="lastName" @bind-Value="newPerson.LastName" />
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>



<button class="btn btn-primary" @onclick="InsertData">Insert</button>
<button class="btn btn-warning" @onclick="UpdateData">Update</button>
<button class="btn btn-danger" @onclick="DeleteData">Delete</button>

@if (people == null)
{
<p><em>Loading...</em></p>
}
else
{


    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>FirstName</th>
                <th>LastName</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var p in people)
            {
            <tr>
                <td>@p.FirstName</td>
                <td>@p.LastName</td>
            </tr>
            }


        </tbody>
    </table>
}


@code {

    //This is a legacy method - I changed the Interface, since I didn't like this method of operation. 

    private DisplayPersonModel newPerson = new DisplayPersonModel();

    private async Task InsertData()
    {
        string sql = "insert into people(FirstName, LastName) value (@FirstName, @LastName);";
        await _data.SaveData(sql, _config.GetConnectionString("default"));
    }

    private async Task UpdateData()
    {
        string sql = "update people set Firstname = @FirstName where LastName = @LastName";

        await _data.SaveData(sql, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task DeleteData()
    {
        string sql = "delete from people where LastName = @LastName";

        await _data.SaveData(sql, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }


    private async Task InsertPerson()
    {
        PersonModel p = new PersonModel
        {
            FirstName = newPerson.FirstName,
            LastName = newPerson.LastName
        };

        string sql = "insert into people(FirstName, LastName) value (@FirstName, @LastName);";
        await _data.SaveData(sql, _config.GetConnectionString("default"));



        await OnInitializedAsync();

        newPerson = new DisplayPersonModel();
    }


    List<PersonModel> people;

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from people";
        people = await _data.LoadData<PersonModel>(sql, _config.GetConnectionString("default"));
    }
}
