@page "/admin/files"
@inject IRecipeDataLoader dataLoader
@inject IFileManger fileManager
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="Administrator">
    <h3>FileManager</h3>
    <p>Use this page to find all recipes stored on disk</p>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>File Name</th>
                <th>UploadDate</th>
                <th>Recipe ID</th>
                <th>Delete</th>
                <th>View</th>
                <th>Edit</th>
                <th>Download</th>
            </tr>
        </thead>
        <tbody>
            @foreach (FileInfo file in files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.LastWriteTime.ToShortDateString()</td>
                    @if (fileManagerDictionary.ContainsKey(file.Directory.Name))
                    {
                        FileManagerModel model = fileManagerDictionary[file.Directory.Name];
                        <td>@model.RecipeID</td>
                        <td><btn class="btn btn-danger" @onclick="(()=>DeleteLinkedFile(file,model))">Delete + recipe</btn></td>
                        <td><a href="/Recipe/@model.RecipeID" class="btn btn-primary">View</a></td>
                        <td><a href="/Recipe/@model.RecipeID/Edit" class="btn btn-primary">Edit</a></td>

                    }
                    else
                    {

                        <td>-</td>
                        <td><btn class="btn btn-danger" @onclick="(()=>DeleteUnlinkedFile(file))">Delete</btn></td>
                        <td>-</td>
                        <td>-</td>

                    }
                    <td><btn class="btn btn-primary" @onclick="(()=>DowloadFile(file.FullName))"> Download</btn></td>
                </tr>
            }

        </tbody>
    </table>


    <ErrorNotification ErrorMessage="An unhandled database exception has occured" Show="@error"></ErrorNotification>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <h1>You will need to sign in to veiw this page.</h1>
    </NotAuthorized>
</AuthorizeView>
@code
{
    int resultsPerQuery = 300;
    int offset = 0;
    bool error = false;
    Dictionary<string, FileManagerModel> fileManagerDictionary = new();
    private void DeleteUnlinkedFile(FileInfo file)
    {
        File.Delete(file.FullName);
        Directory.Delete(file.DirectoryName);
        files.Remove(file);
    }
    private void DeleteLinkedFile(FileInfo fileInfo, FileManagerModel file)
    {

        dataLoader.DeleteRecipeAndRelatedValues(file.RecipeID);
        fileManager.DeleteFile(file.FileID);
        files.Remove(fileInfo);
    }
    private async void DowloadFile(string directoryName)
    {
        string url = fileManager.GetURLFromAbsolutePath(directoryName);
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    public List<FileInfo> files { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            files = await fileManager.GetAllFilesStoredOnDisk();
            error = false;
            await GetFileDetails();
        }
        catch
        {
            error = true;
        }
    }

    private async Task GetFileDetails()
    {
        foreach (FileInfo fileInfo in files)
        {
            string MD5Hash = fileInfo.Directory.Name;
            FileManagerModel fileManagerModel = await dataLoader.GetFile(MD5Hash);
            if (fileManagerModel != null)
            {
                fileManagerDictionary.Add(MD5Hash, fileManagerModel);
            }
        }
    }

}