@page "/admin/newpassword/{RequestToken}/change"
@inject IRecipeDataLoader dataLoader
<h3>SetNewPassword</h3>

@code {
    [Parameter]
    public string RequestToken { get; set; }
    public PasswordRestToken PasswordRestToken { get; set; }
    bool error = false;


    protected async override Task OnInitializedAsync()
    {
        try
        {
            PasswordRestToken = await dataLoader.GetPasswordResetToken(RequestToken);
        }
        catch
        {
            error = true;
        }
    }
}

@if (PasswordRestToken == null)
{
    <p>Can't find the requested token</p>
}
else
{
    if (PasswordRestToken.ResetTokenIDViewed && !OTPProvided)
    {
        <p>The token you provided has already been used. You will need to send another password reset link</p>
    }
    else
    {
        if (!OTPProvided)
        {
            <label>OTP </label>
            <input @bind="@oneTimePasscode" type="text" id="@Random.Next()" /><btn class="btn btn-primary" @onclick="SubmitOTP">Submit</btn>
        }
        else
        {
            <p>OTP @oneTimePasscode entered.</p>

        }
        @code{
            string oneTimePasscode = "";
            bool OTPProvided = false;

            Random Random = new Random();

            private async void  SubmitOTP()
            {
                PasswordRestToken.ResetTokenIDViewed = true;
                OTPProvided = true;
                try
                {
                    await dataLoader.GenericUpdate<PasswordRestToken>(PasswordRestToken);
                }
                catch
                {
                    error = true;
                    OTPProvided = false;
                }

            }
        }
    }
}

@if (OTPProvided)
{


    @if (!UsernameProvided)
    {
        <label>Please supply the username attached in the Email: </label>
        <input @bind="@username" type="text" id="@Random.Next()" /><btn class="btn btn-primary" @onclick="SubmitUsername">Submit</btn>
    }
    else
    {
        <p>Username @username provided.</p>
    }
}
@code{
    string username = "";
    bool UsernameProvided = false;

    private void SubmitUsername()
    {
        UsernameProvided = true;
        ValidateAllInput();
    }

    private async void ValidateAllInput()
    {
        if (PasswordRestToken.OTP == oneTimePasscode && username == PasswordRestToken.UserName)
        {
            validResetProvided = true;
            PasswordRestToken.OTPUsed = true;
            try
            {
                await dataLoader.GenericUpdate<PasswordRestToken>(PasswordRestToken);
            }
            catch
            {
                error = true;
                validResetProvided = false;

            }
        }
        processing = false;
    }

    bool processing = true;
    bool validResetProvided = false;
}
@if (UsernameProvided)
{
    @if (processing)
    {
        <p>We're verifiying you are human .....</p>
        <LoadingElement></LoadingElement>
    }
    else
    {
        if (!validResetProvided)
        {
            <p>We have analysed the details you provided. The details you have given us <span class="alert-danger">do not match any on record.</span>Please repeat the password recovery process to try again</p>
        }
        else
        {
            <label>New password</label>
            <input type="password" @bind="newPassword" />
            <label>Repeat the new password</label>
            <input type="password" @bind="newPasswordReentry" />
            <btn class="btn btn-primary" @onclick="SubmitNewPassword">Submit</btn>
            @if (!passwordsMatch) { 
                <p class="alert-danger">The passwords provided do not match!</p>
}

@if (passwordReplaced) { 
    <p>Successfully replaced @username's password.</p>
}
        }
    }
}

@code{
    string newPassword = "";
    string newPasswordReentry = "";

    bool passwordsMatch = true;
    bool passwordReplaced = false;

    private async void SubmitNewPassword()
    {

        if (newPassword == newPasswordReentry) {
            passwordsMatch = true;

            User userInDatabaseConnectedToToken = await dataLoader.GetUserFromDatabase(PasswordRestToken.UserName);
            User user = new User();
            user.Role = userInDatabaseConnectedToToken.Role;
            user.SHA512 = User.CreateSHAHash(newPassword);
            user.UserName = PasswordRestToken.UserName;

            await dataLoader.UpdatePassword(user);

            passwordReplaced = true;

        }
        else
        {
            passwordsMatch = false;
        }
    }
}
<ErrorNotification Show="@error" ErrorMessage="There was an error while processing your request."></ErrorNotification>
