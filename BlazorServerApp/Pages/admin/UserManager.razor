@inject IRecipeDataLoader dataLoader
@using Microsoft.AspNetCore.Http
@using System.Text.RegularExpressions
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration config
@inject EmailSettings mailSettings
@inject NavigationManager navManager
@page "/admin/usermanager"
@using Newtonsoft.Json
<AuthorizeView Roles="Administrator">
    @if (!error)
    {
        <h3>UserManager</h3>
        <h2>Create a new Administrator</h2>
        <div class="container">

            <EditForm Model="newUser" OnValidSubmit="@CreateUser" Context="UserCreator">
                <DataAnnotationsValidator />
                <div>
                    <label>UserName</label>
                    <InputText type="text"
                               placeholder="User Name" @bind-Value="@newUser.UserName" />
                </div>
                <div>
                    <label>Password</label>
                    <InputText type="password"
                               placeholder="password" @bind-Value="@newUser.RepeatPassword" />
                </div>
                <div>
                    <label>Repeat password</label>
                    <InputText type="password"
                               placeholder="password" @bind-Value="@newUser.Password" />
                </div>
                <div>
                    <label>Role</label>
                    <InputSelect @bind-Value="@newUser.Role">
                        <option></option>
                        @foreach (string role in User.GetCurrentRoles())

                            {
                            <option value="@role">@role</option>
                            }
                    </InputSelect>
                </div>
                <ValidationSummary />
                <button type="submit" class="btn btn-primary">Create User</button>
            </EditForm>
            @if (errorsWhileCreatingUser != null && errorsWhileCreatingUser.Length >= 0)
            {
                <p class="alert-danger">@errorsWhileCreatingUser</p>
            }

        </div>
        @code{
            CreateNewUser newUser = new CreateNewUser();
        }
        <table class="table table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>User Name</th>
                    <th>User Role</th>
                    <th>Delete User</th>
                </tr>
            </thead>
            <tbody>
                @foreach (User user in users)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.Role</td>
                        @if (user.UserName != currentLoggedInUser && !user.UserName.StartsWith("BackupAccount:")) // prevent them deleting themsleves!
                        {
                            <td><btn class="btn btn-danger" @onclick="@(() => DeleteUser(user))">Delete</btn></td>
                        }
                        else
                        {
                            <td>Can't do that!</td>
                        }
                    </tr>
                }

            </tbody>
        </table>

        <h2>Add new recovery address</h2>
        <div class="container">
            <EditForm Context="CreateRecoveryAddress" Model="recoveryEmail" OnValidSubmit="@CreateNewRecoveryEmailAddress">
                <DataAnnotationsValidator />
                <div>
                    <label>Email Address</label>
                    <InputText type="email"
                               placeholder="name@domain" @bind-Value="@recoveryEmail.EmailAddress" />
                </div>
                <div>
                    <label>Name</label>
                    <InputText type="text"
                               placeholder="name" @bind-Value="@recoveryEmail.UserName" />
                </div>
                <button type="submit" class=" btn btn-primary">Create recovery address</button>
                <ValidationSummary></ValidationSummary>
            </EditForm>
            @if (errorsWhileCreatingRecoveryAddress != null && errorsWhileCreatingRecoveryAddress.Length >= 0)
            {
                <p class="alert-danger">@errorsWhileCreatingRecoveryAddress</p>
            }
        </div>
        <table class="table table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Email address</th>
                    <th>User name</th>
                    <th>Delete User</th>
                </tr>
            </thead>
            <tbody>
                @foreach (RecoveryEmailAddresses address in recoveryEmailAddresses)
                {
                    <tr>

                        <td>@address.EmailAddress</td>
                        <td>@address.UserName</td>
                        @if (recoveryEmailAddresses.Count > 1) // prevent lockout
                        {
                            <td><btn class="btn btn-danger" @onclick="@(() => DeleteAddress(address))">Delete</btn></td>
                        }
                        else
                        {
                            <td>Can't do that!</td>
                        }
                    </tr>
                }

            </tbody>
        </table>
    }
    else
    {
        <p class="alert-danger">Error occured</p>
    }
    <ErrorNotification Show="noRecoveryEmailAddresses" ErrorMessage="Please add a recovery email address to prevent being locked out!"></ErrorNotification>

    <ErrorNotification ErrorMessage="@Message" Show="@error"></ErrorNotification>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>


        @if (noAdminsHaveBeenCreated)
        {
            <h1>DO NOT LEAVE THIS PAGE! OTHERWISE YOU WILL BE LOCKED OUT.</h1>
            <h2>
                Welcome to the User Manager.
            </h2>
            <p>You will be supplied with a backup account, and then will need to create a new admin account. We'll also ask for an email address that can recieve mail from @mailSettings.From to recieve password reset instructions. </p>
            <p>@BackupAccountCredentials You should keep a copy of these account details, incase you get locked out!</p>
            <h2>Create a new admin</h2>
            <div class="container">

                <EditForm Model="newUser" OnValidSubmit="@CreateUser" Context="UserCreator">
                    <DataAnnotationsValidator />
                    <div>
                        <label>UserName</label>
                        <InputText type="text"
                                   placeholder="User Name" @bind-Value="@newUser.UserName" />
                    </div>
                    <div>
                        <label>Password</label>
                        <InputText type="password"
                                   placeholder="password" @bind-Value="@newUser.RepeatPassword" />
                    </div>
                    <div>
                        <label>Repeat password</label>
                        <InputText type="password"
                                   placeholder="password" @bind-Value="@newUser.Password" />
                    </div>
                    <div>
                        <label>Role</label>
                        <InputSelect @bind-Value="@newUser.Role">
                            <option></option>
                            @foreach (string role in User.GetCurrentRoles())

                                {
                                <option value="@role">@role</option>
                                }
                        </InputSelect>
                    </div>
                    <ValidationSummary />
                    <button type="submit" class="btn btn-primary">Create User</button>
                </EditForm>
                @if (errorsWhileCreatingUser != null && errorsWhileCreatingUser.Length >= 0)
                {
                    <p class="alert-danger">@errorsWhileCreatingUser</p>
                }

            </div>
            <EditForm Context="CreateRecoveryAddress" Model="recoveryEmail" OnValidSubmit="@CreateNewRecoveryEmailAddress">
                <DataAnnotationsValidator />
                <div>
                    <label>Email Address</label>
                    <InputText type="email"
                               placeholder="name@domain" @bind-Value="@recoveryEmail.EmailAddress" />
                </div>
                <div>
                    <label>Name</label>
                    <InputText type="text"
                               placeholder="name" @bind-Value="@recoveryEmail.UserName" />
                </div>
                <button type="submit" class=" btn btn-primary">Create recovery address</button>
                <ValidationSummary></ValidationSummary>
            </EditForm>
            @if (errorsWhileCreatingRecoveryAddress != null && errorsWhileCreatingRecoveryAddress.Length >= 0)
            {
                <p class="alert-danger">@errorsWhileCreatingRecoveryAddress</p>
            }

            <p>Now you can login, using the account you created. </p>
            <btn class="btn btn-primary" @onclick="@(()=>attemptedToLogin = true)">Login</btn>
            @if (attemptedToLogin)
            {
                <p class="alert-danger">After leaving this page, you will need to login to make changes. Make sure you have created an account.</p>
                <btn class="btn btn-danger" @onclick="LogUserIn">Are you sure?</btn>
            }

        }
        else
        {
            <h1>You will need to login to view this page</h1>
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    bool error = false;
    bool noAdminsHaveBeenCreated = false;
    bool noRecoveryEmailAddresses = false;
    bool firstLoad = true;
    bool attemptedToLogin = false;
    string BackupAccountCredentials = "";
    string Message;
    string currentLoggedInUser;
    string temporaryPassword = "";
    string temporaryUsername = "";
    string errorsWhileCreatingRecoveryAddress = "";
    List<User> users = new List<User>();
    List<RecoveryEmailAddresses> recoveryEmailAddresses = new();
    RecoveryEmailAddresses recoveryEmail = new();

    private void LogUserIn()
    {
        navManager.NavigateTo($"/Login?paramUsername={HttpUtility.UrlEncode(temporaryUsername)}&paramPassword={HttpUtility.UrlEncode(temporaryPassword)}&paramReturnURL=/admin/usermanager", true);
    }

    private async Task<string> BackupAccount()
    {
        string tempPassword = "";
        string temptUsername = "";
        try
        {

            User user = new User();
            user.Role = "Administrator";
            string path = Path.Combine(Directory.GetCurrentDirectory(), "RandomWords.txt");
            if (File.Exists(path))
            {
                Console.WriteLine("Using random words to generate username and password.");
                string[] RandomWords;
                using (StreamReader streamReadr = new StreamReader(path))
                {

                    string fileContents = streamReadr.ReadToEnd();
                    RandomWords = fileContents.Split("\n");
                }
                temptUsername = "BackupAccount:" + CreatePassphrase(RandomWords, 2, "-");
                tempPassword = CreatePassphrase(RandomWords, 3, "&");
                user.UserName = temptUsername;
                user.SHA512 = User.CreateSHAHash(tempPassword);
            }
            else
            {
                Console.WriteLine("Random words text file was absent, so using random text instead!");
                temptUsername = "BackupAccount:" + CreateRandomText(20);
                tempPassword = CreateRandomText(3);
                user.UserName = temptUsername;
                user.SHA512 = User.CreateSHAHash(tempPassword);
            }
            await dataLoader.SaveUser(user);
        }
        catch
        {
            error = true;
        }
        return $"A backup account was created, username '{temptUsername}', password: '{tempPassword}' ";
    }

    private string CreatePassphrase(string[] randomWords, uint itterations, string delimiter)
    {
        string passPhrase = "";
        for (uint i = 0; i < itterations; i++)
        {
            passPhrase += randomWords[_random.Next(0, randomWords.Length)].Trim() + delimiter;
        }
        passPhrase = passPhrase.Substring(0, passPhrase.LastIndexOf(delimiter));
        return passPhrase;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstLoad)
        {
            firstLoad = false;
            try
            {
                currentLoggedInUser = httpContextAccessor.HttpContext.User.Identity.Name;
                await LoadUsers();
                if (users.Count <= 1) // I.e. just backup account
                {
                    noAdminsHaveBeenCreated = true;
                    BackupAccountCredentials = await BackupAccount();
                    StateHasChanged();
                }
                await LoadRecoveryAddresses();
                if (recoveryEmailAddresses.Count == 0)
                {
                    noRecoveryEmailAddresses = true;
                }
            }
            catch
            {
                error = true;
                Message = "An unhandled database exception occured";
            }

        }
    }
    Random _random = new Random();

    public string CreateRandomText(int lenth)
    {
        string alphabet = "abcdefghijklmnopqrstuvwxyz";
        string text = "";
        for (int i = 0; i < lenth; i++)
        {
            int randomIndex = _random.Next(26);
            text += alphabet[randomIndex];
        }
        return text;
    }

    private async Task LoadRecoveryAddresses()
    {
        recoveryEmailAddresses = await dataLoader.GetEmailAddresses();
    }

    private async Task LoadUsers()
    {
        users = await dataLoader.GetAllUsers();
    }

    private async void DeleteAddress(RecoveryEmailAddresses recoveryEmailAddress)
    {
        await dataLoader.GenericDelete<RecoveryEmailAddresses>(recoveryEmailAddress);
        recoveryEmailAddresses.Remove(recoveryEmailAddress);
    }

    private async void DeleteUser(User user)
    {
        await dataLoader.DeleteUser(user.UserName);
        users.Remove(user);
    }
    private async void CreateNewRecoveryEmailAddress()
    {
        errorsWhileCreatingRecoveryAddress = "";
        try
        {
            RecoveryEmailAddresses addresses = await dataLoader.GetSingleAddress(recoveryEmail.EmailAddress);
            if (addresses == null)
            {
                await dataLoader.GenericInsert<RecoveryEmailAddresses>(recoveryEmail);
                error = false;
                recoveryEmailAddresses.Add(recoveryEmail);
            }
            else
            {
                errorsWhileCreatingRecoveryAddress += $"{recoveryEmail.EmailAddress} already exists in the database! ";
            }
        }
        catch
        {
            error = true;
            Message = "An unhandled and unexpected result occured while connecting to the database";
            errorsWhileCreatingRecoveryAddress += Message;
        }
        await LoadUsers();
    }
    string errorsWhileCreatingUser;

    private async Task CreateUser()
    {
        errorsWhileCreatingUser = "";
        try
        {
            User existingUser = await dataLoader.GetUserFromDatabase(newUser.UserName);
            if (existingUser == null)
            {
                if (newUser.Password == newUser.RepeatPassword)
                {
                    User user = new User();
                    user.Role = newUser.Role;
                    user.SHA512 = User.CreateSHAHash(newUser.Password);
                    user.UserName = newUser.UserName;
                    await dataLoader.SaveUser(user);

                    temporaryUsername = user.UserName; //Provides support for the inital setup
                    temporaryPassword = newUser.RepeatPassword;
                    error = false;
                    newUser = new CreateNewUser();
                }
                else
                {
                    errorsWhileCreatingUser += " The two passwords provided didn't match";
                }
            }
            else
            {
                errorsWhileCreatingUser += "A user with the same name already exists on the database ";
            }
        }
        catch
        {
            error = true;
            Message = "An unhandled and unexpected result occured while connecting to the database";
            errorsWhileCreatingUser += Message;
        }
        await LoadUsers();
    }
}
