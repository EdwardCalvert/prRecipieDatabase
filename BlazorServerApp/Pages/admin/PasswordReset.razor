@using BlazorServerApp.STMPMailer
@inject IConfiguration config
@inject IEmailSender sender
@inject IRecipeDataLoader dataLoader
@inject NavigationManager navMangaer
@page "/userStuck/passwordReset"
<AuthorizeView>
    <h1>Why do you need to reset your password if you are logged in?</h1>
    <p>Changing passwords can be done from the users page on the admin panel!</p>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <h2>Password Reset</h2>
        <p>Please enter your username to get started. </p>
        <div>
            <label>User Name</label>
            @if (!usernameEntered)
            {
                <input @bind="@username" id="@Random.Next()" /><btn class="btn btn-primary" @onclick="UsernameSubmitted">Submit</btn>
            }
            else
            {
                <p>@username</p>
            }
        </div>
        @code {
            string username = "";
            bool usernameEntered = false;
            Random Random = new Random();

            private void UsernameSubmitted()
            {
                Console.WriteLine("Password reset initiated");
                usernameEntered = true;
            }
            string whatUserBelievesWasLastPassword = "";
        }
@if (usernameEntered)
{
    <div>
        @if (!passwordEntered)
        {
        <label>Please enter what you beilieve your last password was</label><input id="@Random.Next()" @bind="@whatUserBelievesWasLastPassword" type="password" /><btn class="btn btn-primary" @onclick="PotentialPasswordSubmitted">Submit</btn>
         }
    </div>
}

    @code{
        private bool passwordEntered = false;
        bool backgroundProcessing = true;
        bool PasswordWasCorrect = false;

        private async void PotentialPasswordSubmitted()
        {
            try
            {
                passwordEntered = true;
                backgroundProcessing = true;
                User user = await dataLoader.GetUserFromDatabase(username);
                if (user != null)
                {
                    if (user.SHA512 == User.CreateSHAHash(whatUserBelievesWasLastPassword))
                    {
                        PasswordWasCorrect = true;
                        backgroundProcessing = false;
                    }
                    else
                    {
                        SendPasswordRecovery();
                    }
                }
                else
                {
                    backgroundProcessing = false;
                }
                error = false;
            }
            catch
            {
                error = true;
            }
        }
    }
        @if (passwordEntered && backgroundProcessing)
        {
            <p>Please wait ...... monkeys are running in the background to process your request.</p>
            <LoadingElement></LoadingElement>
        }
        @if (PasswordWasCorrect)
        {
            <p>You did get your password correct! </p>
            <btn class="btn btn-primary" @onclick="@(()=> SignInUser())">Click here to login</btn>
        }

        @code{
            private void SignInUser()
            {
                navMangaer.NavigateTo($"/Login?paramUsername={HttpUtility.UrlEncode(username)}&paramPassword={HttpUtility.UrlEncode(whatUserBelievesWasLastPassword)}",true);
            }

            private async void SendPasswordRecovery()
            {
                try
                {
                    PasswordRestToken resetToken = new PasswordRestToken(username);
                    await dataLoader.GenericInsert<PasswordRestToken>(resetToken);
                    EmailMessage emailMessage = new EmailMessage();
                    emailMessage.Subject = "Password Reset";
                    emailMessage.Content = $@"Hello Admin, 
A user named '{username}' is attempting to reset their password. If you agree with this request, you can set a new password at this link 
___________________________________________________________________________
{resetToken.GetAbsoluteURL(navMangaer.BaseUri)}
___________________________________________________________________________
You will need to provide the auth token: 

_______________________
{resetToken.OTP} 
______________________

Many thanks, 
Project Chili web server 
(p.s. This is an unmonitored account, so please don't send any messages to it!)
";
                    backgroundProcessing = false;
                    await sender.SendEmail(emailMessage);
                    error = false;
                }
                catch
                {
                    error = true;
                }
            }
            bool error = false;
        }
        <ErrorNotification Show="@error" ErrorMessage="An unexpected error occured while processing"></ErrorNotification>
        @if (!backgroundProcessing&&!PasswordWasCorrect)
        {
            <p>If the username is recognised, a recovery email will sent to the application administrator. Please speak to them for more details.</p>
        }
    </NotAuthorized>
</AuthorizeView>

