@page "/admin/BulkUpload"
@inject IRecipeProcessorService recipeProcessorService
@inject ITextProcessor textProcessor
@inject IRecipeDataLoader dataLoader
@using BlazorServerApp.proccessService

<AuthorizeView Roles="Administrator">
    <div style="max-width: 100%!important;width: 100%!important;">
        <h3>BulkUploadPage</h3>

        @if (recipeProcessorService.FilesAreQueued())
        {
            @if (undergoingProccessing && recipeModel != null)
            {
                <LoadingElement></LoadingElement>
            }
            else
            {
                <div class="row" style="max-width: 100% !important; width: 100% !important; flex-direction: row; flex-wrap: nowrap; ">
                    <div class="col-8">
                        <RecipeForm RecipeModel="@recipeModel" mode="RecipeForm.MODES.BulkUpload" OnClick="SubmitRecipe" />
                    </div>
                    <div class="co-4" style="margin-left:10px;">
                        @foreach (string line in documentTextPreview.Split("\n"))
                        {
                            <p>@line</p>
                        }
                    </div>
                </div>
            }
            @*<ProgressBar Percent="@(((recipeProcessorService.GetNumberOfItemsInQueue()-numberOfItemsInitiallyInQueue)/numberOfItemsInitiallyInQueue)*100)"></ProgressBar>*@
            <btn class="btn btn-danger" @onclick="(()=>DeleteRecipe())">Delete</btn>
        }
        else
        {
            <p>No recipes are queued for approval. Enjoy your day.</p>
        }


    </div>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <h1>Sorry, you'll have to login in to view this page.</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    int numberOfItemsInitiallyInQueue;
    string documentTextPreview="";
    string currentMD5Hash;
    bool undergoingProccessing = false;
    Recipe recipeModel = new();

    private async Task SubmitRecipe()
    {
        await recipeProcessorService.InsertRecipeAndFileToDB(recipeModel, currentMD5Hash);

        FindNextRecipeForProcessing();
        Console.WriteLine("Button clicked");
    }

    protected override async Task OnInitializedAsync()
    {
        numberOfItemsInitiallyInQueue = recipeProcessorService.GetNumberOfItemsInQueue();
        await FindNextRecipeForProcessing();
    }
    public async Task FindNextRecipeForProcessing()
    {
        if(currentMD5Hash != null)
        {
            recipeProcessorService.Dequeue();
        }
        currentMD5Hash = recipeProcessorService.PeekNextDocument();
        if (currentMD5Hash !=null)
        {

            documentTextPreview = await recipeProcessorService.DocxToText(currentMD5Hash);

            undergoingProccessing = true;
            this.StateHasChanged();
            await Task.Delay(1);

            recipeModel = await textProcessor.CreateRecipe(documentTextPreview);

            undergoingProccessing = false;
            await Task.Delay(1);      // changes are flushed again
            this.StateHasChanged();

        }
    }

    public async void DeleteRecipe()
    {
        await recipeProcessorService.DeleteFile(currentMD5Hash);
        recipeProcessorService.Dequeue();
        await FindNextRecipeForProcessing();
        StateHasChanged();
    }
}
