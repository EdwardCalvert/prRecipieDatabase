@page "/admin"
@using DataLibrary
@using BlazorServerApp.Shared
@using BlazorServerApp.Models
@using Microsoft.Extensions.Configuration
@try
{
<h3>AdminPage</h3>
<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Table Name</th>
            <th>Button to intitalise process</th>
            <th>Number of records on table</th>
        </tr>
    </thead>
    <tbody>
        @foreach (string tableName in tables) {
        <tr>
            <td>@tableName</td>

            @if (DoTablesExist(tableName).Result)
            {
                <td><button class="btn btn-danger">@tableName Table exists. I would give you the option of deleting it,<br />but I haven't made that script yet! </button></td>

                <td>@SumRecords(tableName).Result</td>

            }
            else
            {
                <td><button class="btn btn-primary" @onclick="e=> RunSql(tableCreationCodes[tableName])">Create recipe table</button></td>
                <td>0</td>
            }

        </tr>
        }
        
    </tbody>
    </table>
}
catch(Exception e)
{
    <BlazorServerApp.Shared.ErrorNotification ErrorMessage="e.Message"/>
}
@code {
        private List<string> tables = new List<string>() { "Recipe", "Method", "Review" };
        protected override Task OnInitializedAsync()
        {
            return base.OnInitializedAsync();
        }

        private async Task<bool> DoTablesExist(string tableName)
        {
            List<string> returnData = new List<string>();
            returnData =  await _data.LoadData<string>($"SHOW TABLES LIKE \"{tableName}\";", _config.GetConnectionString("recipeDatabase"));
            return returnData.Count != 0 ;
        }

        private async Task<int> SumRecords(string tableName)
        {
            List<int> sum = await _data.LoadData<int>($"SELECT count( * ) as  total_record FROM {tableName}", _config.GetConnectionString("recipeDatabase"));
            if (sum.Count > 0)
            {
                return sum[0];
            }
            return 0;
        }


        private Dictionary<string, string> tableCreationCodes = new Dictionary<string, string>()
    {
        { "Recipe",@"CREATE TABLE `Recipe` (
	`RecipeID` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	`Servings` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
	`MealType` ENUM('Starter','Main','Dessert','Snack','Accompaniment','Cake','Biscuit','LightMeal') NOT NULL COLLATE 'latin1_swedish_ci',
	`RecipeName` TINYTEXT NOT NULL COLLATE 'latin1_swedish_ci',
	`Kcal` DECIMAL(20,2) NULL DEFAULT NULL,
	`Saturates` DECIMAL(20,2) NULL DEFAULT NULL,
	`Carbohydrates` DECIMAL(20,2) NULL DEFAULT NULL,
	`Sugar` DECIMAL(20,2) NULL DEFAULT NULL,
	`Fibre` DECIMAL(20,2) NULL DEFAULT NULL,
	`Protein` DECIMAL(20,2) NULL DEFAULT NULL,
	`Salt` DECIMAL(20,2) NULL DEFAULT NULL,
	`Fat` DECIMAL(20,2) NULL DEFAULT NULL,
	`CookingTime` SMALLINT(5) NULL DEFAULT '0',
	`PreperationTime` SMALLINT(5) NULL DEFAULT '0',
	`DocxFilePath` MEDIUMTEXT NULL DEFAULT NULL COLLATE 'latin1_swedish_ci',
	`Difficulty` ENUM('Easy','Medium','Hard') NULL DEFAULT NULL COLLATE 'latin1_swedish_ci',
	`PageVisits` INT(10) UNSIGNED NULL DEFAULT NULL,
	`LastRequested` DATETIME NULL DEFAULT NULL,
	`Description` TEXT NULL DEFAULT NULL COLLATE 'latin1_swedish_ci',
	PRIMARY KEY (`RecipeID`) USING BTREE
)
COLLATE='latin1_swedish_ci'
ENGINE=InnoDB
AUTO_INCREMENT=11
;" },{"Method",@"CREATE TABLE `Method` (
	`StepNumber` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	`RecipeID` INT(10) UNSIGNED NOT NULL,
	`MethodText` TEXT NOT NULL COLLATE 'latin1_swedish_ci',
	PRIMARY KEY (`StepNumber`, `RecipeID`) USING BTREE,
	INDEX `RecipeID` (`RecipeID`) USING BTREE,
	CONSTRAINT `RecipeID` FOREIGN KEY (`RecipeID`) REFERENCES `RecipeDatabase`.`Recipe` (`RecipeID`) ON UPDATE NO ACTION ON DELETE CASCADE
)
COLLATE='latin1_swedish_ci'
ENGINE=InnoDB
;"},{"Review",@"CREATE TABLE `Review` (
	`ReviewID` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	`RecipeID` INT(10) UNSIGNED NOT NULL DEFAULT '1',
	`ReviewersName` TINYTEXT NOT NULL COLLATE 'latin1_swedish_ci',
	`ReviewTitle` TEXT NOT NULL COLLATE 'latin1_swedish_ci',
	`ReviewText` MEDIUMTEXT NOT NULL COLLATE 'latin1_swedish_ci',
	`StarCount` INT(10) UNSIGNED NOT NULL DEFAULT '1',
	PRIMARY KEY (`ReviewID`) USING BTREE,
	INDEX `ReviewFK` (`RecipeID`) USING BTREE,
	CONSTRAINT `ReviewFK` FOREIGN KEY (`RecipeID`) REFERENCES `RecipeDatabase`.`Recipe` (`RecipeID`) ON UPDATE NO ACTION ON DELETE CASCADE
)
COLLATE='latin1_swedish_ci'
ENGINE=InnoDB
;"}
    };


    private async Task RunSql(string sql)
    {
        await _data.SaveData(sql, _config.GetConnectionString("recipeDatabase"));
    }
}
