@page "/upload/csv"
@using DataLibrary
@using BlazorServerApp.Shared
@using BlazorServerApp.Models
@using Microsoft.Extensions.Configuration
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject IRecipeDataLoader dataLoader

<h3>DataLoaders</h3>
<p>The equipment and ingredients table require data to operate correctly. Upload a csv/ or work manually to add for the first time.</p>

@*<h5>Equipment Table</h5>
<form @onsubmit="AsyncSubmitEquipment">
    <InputFile OnChange="OnInputFileChange" multiple />
    <br /><br />
    <button type="submit" class="btn btn-primary">Upload Selected File(s) to the Equipment Table</button>
    <p>@Message</p>
</form>*@
<h5>IngredientsTable</h5>
<UploadIngredientComponent></UploadIngredientComponent>
<hr/>
<h5>Word Documents (this may be slow due to the large size of documents)</h5>
<UploadWordDocument></UploadWordDocument>

@if (error)
{
    <ErrorNotification ErrorMessage="@Message" />
}

@code {
    private string Result { get; set; }
    bool error = false;
    bool spinning = false;

    int IngredientInsertPercent { get; set; }

    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    const int largestFileSize = 1873691000;

    private bool isChecked { get; set; } = true;



    //private async Task SubmitEquipment()
    //{
    //    try
    //    {

    //        foreach (var file in selectedFiles)
    //        {
    //            using (StreamReader streamReader = new StreamReader(file.OpenReadStream()))
    //            {
    //                string reader = await streamReader.ReadToEndAsync();
    //                await dataLoader.ProcessEquipmentCsvAndSaveToDB(reader);
    //            }
    //        }
    //        Message = $"{selectedFiles.Count} file(s) uploaded on server";
    //        //this.StateHasChanged();
    //        error = false;
    //    }
    //    catch (NullReferenceException)
    //    {
    //        Message = "Sorry, please attach some files!";
    //        error = true;
    //    }
    //    catch (Exception e)
    //    {
    //        Message = "Error encoundtered:" + e.Message;
    //        error = true;
    //    }
    //}

    //private async Task AsyncSubmitEquipment()    // this is an async task
    //{
    //    spinning = true;
    //    await Task.Delay(1);      // flushing changes. The trick!!
    //    await SubmitEquipment();               // non-async code
    //    spinning = false;
    //    await Task.Delay(1);      // changes are flushed again
    //}

}
