@page "/upload"
@using DataLibrary
@using BlazorServerApp.Shared
@using BlazorServerApp.Models
@using Microsoft.Extensions.Configuration
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject RecipeDataLoader dataLoader

<h3>DataLoaders</h3>
<p>The equipment and ingredients table require data to operate correctly. Upload a csv/ or work manually to add for the first time.</p>

<h5>Equipment Table</h5>
<form @onsubmit="AsyncSubmitEquipment">
    <InputFile OnChange="OnInputFileChange" multiple />
    <br /><br />
    <button type="submit" class="btn btn-primary">Upload Selected File(s) to the Equipment Table</button>
    <p>@Message</p>
</form>
<h5>IngredientsTable</h5>
<form @onsubmit="SubmitIngredintsAsync">
    <InputFile OnChange="OnInputFileChange" multiple />
    <br /><br />
    @if (!spinning)
    {
        <p>Enable deduplication? (Only turn off if you are sure that the data isn't allready in DB)</p>
        <ToggleSwitch Id="mySwitch" OnToggle="((isChecked) => DoSomething(isChecked))" SetAsChecked="isChecked" />
        <button type="submit" class="btn btn-primary">Upload Selected File(s) to the Ingredients Table</button>
        <p>@isChecked</p>
    }
    else
    {

        <LoadingElement></LoadingElement>
        <p>Please be patient. Ingredients are being loaded to the database.</p>
        <p>Progress: @IngredientInsertPercent %</p>
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-valuenow="@IngredientInsertPercent" aria-valuemin="0" aria-valuemax="100" style="width: @($"{IngredientInsertPercent}%")">
                <span class="sr-only">@($"{IngredientInsertPercent}% Complete")"</span>
            </div>
        </div>

    }
    <p>@Message</p>
</form>
@if (error)
{
    <ErrorNotification ErrorMessage="@Message" />
}

@code {
    private List<string> tables = new List<string>() { "Recipe", "Method", "Review", "Equipment", "EquipmentInRecipe" };
    private string Result { get; set; }
    bool error = false;
    bool spinning = false;

    int IngredientInsertPercent { get; set; }

    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    const int largestFileSize = 1873691000;

    private bool isChecked { get; set; } = true;


    protected void DoSomething(bool Checked)
    {
        isChecked = Checked;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }

    private async Task SubmitIngredients()
    {
        try
        {
            double count = 0;
            foreach (var file in selectedFiles)
            {
                var csvData = await new StreamReader(file.OpenReadStream(18736910000)).ReadToEndAsync();

                string[] lines = csvData.Split(Environment.NewLine);
                foreach (string line in lines)
                {
                    await Task.Run(() => dataLoader.InsertIngredientIntoDB(line,isChecked));
                    IngredientInsertPercent = (int)((count / lines.Count()) * 100);
                    count++;
                    this.StateHasChanged();
                }

            }
            Message = $"{selectedFiles.Count} file(s) uploaded on server";
            //this.StateHasChanged();
            error = false;

        }
        catch (NullReferenceException)
        {
            Message = "Sorry, please attach some files!";
            error = true;
        }
        catch (Exception e)
        {
            Message = "Error encoundtered:" + e.Message;
            error = true;
        }
    }

    private async Task SubmitEquipment()
    {
        try
        {

            foreach (var file in selectedFiles)
            {
                var reader = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
                await dataLoader.ProcessEquipmentCsvAndSaveToDB(reader);

            }
            Message = $"{selectedFiles.Count} file(s) uploaded on server";
            //this.StateHasChanged();
            error = false;
        }
        catch (NullReferenceException)
        {
            Message = "Sorry, please attach some files!";
            error = true;
        }
        catch (Exception e)
        {
            Message = "Error encoundtered:" + e.Message;
            error = true;
        }
    }

    private async Task AsyncSubmitEquipment()    // this is an async task
    {
        spinning = true;
        await Task.Delay(1);      // flushing changes. The trick!!
        await SubmitEquipment();               // non-async code
        spinning = false;
        await Task.Delay(1);      // changes are flushed again
    }


    private async Task SubmitIngredintsAsync()    // this is an async task
    {
        spinning = true;
        await Task.Delay(1);      // flushing changes. The trick!!
        await SubmitIngredients();               // non-async code
        spinning = false;
        await Task.Delay(1);      // changes are flushed again
    }
}
