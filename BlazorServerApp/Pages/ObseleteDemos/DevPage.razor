@using System.Text.RegularExpressions
@using BlazorServerApp.WordsAPI
@using Newtonsoft.Json 
@inject IRecipeDataLoader dataLoader
@inject IConfiguration config
@inject IHttpClientFactory httpClientFactory

@page "/dev"

<textarea type="text" class="form-control" name="x" placeholder="Enter text" @bind-value="@textArea" @bind-value:event="oninput"></textarea>
<btn class="btn btn-primary" @onclick="@FetchDefinition"></btn>

<select style="margin-left: 5px; margin-left: 5px;" @bind="@binary">
    @foreach (var orderOption in Enum.GetValues(typeof(Binary)))
    {
        <option value="@orderOption">@orderOption</option>
    }
    <value></value>
</select>
@if (type != null)
{
    @foreach (string s in type.typeOf)
    {
        <p>@s</p>
    }
    @if (type.typeOf.Contains("meat"))
    {
        <p>Meat!</p>
    }
}


<p>@(binary&Binary.One )</p>

@code{

    Binary _binary = Binary.Zero;
    Binary binary { get { return _binary; } set { _binary = value; } }

    string _textAre = "";
    string textArea { get { return _textAre; } set { _textAre = value; } }
    TypeOf type;

    [Flags]
    private enum Binary
    {
        Zero = 0,
        One = 1,
        Two = 2,
        Four = 4,
    }

    private enum Ingredients
    {
        Poulty = 1,
        Meat = 2,
        Egg = 4,
        Fruit = 8,
        Vegetables = 16,
        Nuts = 32,
    }

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task FetchDefinition()
    {
        List<SearchQuery> queries = await dataLoader.FindWordsAPISearch(textArea);
        if (queries.Count == 1)
        {
            type = JsonConvert.DeserializeObject<TypeOf>(queries[0].ResultAsJSON);
        }
        else
        {
            WordsAPIService wordsAPIService = new WordsAPIService(httpClientFactory, config);
            type = await wordsAPIService.CallAPI(textArea);
            SearchQuery searchQuery = new SearchQuery();
            searchQuery.SearchTerm = textArea;
            searchQuery.ResultAsJSON = JsonConvert.SerializeObject(type);
            await dataLoader.InsertSearchQuery(searchQuery);

        }

    }
    List<Recipe> results = new();

    public async void Search()
    {
        results = await SearchEnginge.SearchForRecipes(dataLoader, "cheese", SearchEnginge.SortBy.CookingTime, SearchEnginge.Order.Descending);
    }

}