@using System.Text.RegularExpressions
@page "/dev"
<h1>Put text here to analyse</h1>
<textarea type="text" class="form-control" name="x" placeholder="Search term..." @bind="@textArea"></textarea>
<button @onclick="@CreateRecipe" class="btn btn-primary">Run Regexes</button>
Ingredients with count:
<ul>
@foreach (string s in ingredientsWithCount)
{
    <li>@s</li>
}
    </ul>

Title @title
Ingrediens without counts:
<ul>
    @foreach (string s in ingredients)
    {
        <li>@s</li>
    }
</ul>
Total time:
@foreach (string s in times)
{
    <p>@s</p>
}
Servings:
@foreach (string s in servings)
{
    <p>@s</p>
}
Methods:
<ol>
    @foreach (string s in methods)
    {
    <li>@s</li>
    }
</ol>
<p>Description</p><p>
    @foreach (string line in description.Split("\n"))
    {
        if (previousLine.Length <=2 && line.Length<=2)
        {
            previousLine = line;
        }
        else
        {
            @line <br>
            previousLine = line;
        }
    }
</p>
@code {
    public string textArea { get; set; } = "";
    List<string> ingredientsWithCount = new List<string>();
    List<string> ingredients = new List<string>();
    List<string> times = new List<string>();
    List<string> servings = new();
    List<string> methods = new();
    string title = "";
    string description = "";
    string previousLine = "";
    int totalTime = 0;

    public int FindTotalTimeFromInputThatMayHaveHypens(string input)
    {
        if(input == null || input.Length == 0)
        {
            return 0;
        }
        else{
            MatchCollection numbersWithHypens = Regex.Matches(input,"([1-9][0-9]?( (to|-|—) ))[1-9][0-9]?");
            foreach(Match match in numbersWithHypens)
                {

                }
            return 0;
        }

    }



    public void CreateRecipe()
    {
        title = textArea.Split("\n")[0];
        description = textArea;
        //see https://regexr.com/69vg0
        const string SPOONS = "((rounded|heaped|level) )?((tea|desert|table)? ?(spoonful|spoon|tbsp|tsp))s?";
        const string UNITS = "(((fluid ounce|ounce|oz|kilograms|cup|cup|gram|pint|pound|quart|g|kg|ml|fl\\.|gal\\.|lb\\.|pt|qt\\.|bunch|handful)s?)|(" + SPOONS+"))"; //sort by length- ie teaspoons before teaspoon
        const string NUMBERS = "([0-9]|½|⅓|⅔|¼|¾|⅕|⅖|⅗|⅘|⅙|⅚|⅐|⅛|⅜|⅝|⅞|⅑|⅒)";
        const string TIMEWORDS = "(minutes|minute|mins|min|hours|hour|seconds|second|days|day)";
        const string ingredientsSearch = "" + NUMBERS + "{0,3} ?" + NUMBERS + "(\\.|\\/| |-)?" + NUMBERS + "{0,6} ?" + UNITS + " [^\\.\\;\n\t]{3,200}";


        MatchCollection timeRegex = Regex.Matches(textArea, "([1-9][0-9]?( (to|-|—) ))?[1-9][0-9]? "+TIMEWORDS, RegexOptions.Compiled | RegexOptions.IgnoreCase, new TimeSpan(10000000));
        string textAreaWithoutTimes = "";
        foreach (Match match in timeRegex)
        {
            string unit = "";
            int totalTimeInMinutes = 0;

            //if(match.Value.Contains(minutes|minute|mins|mi))
            MatchCollection units =  Regex.Matches(match.Value, TIMEWORDS, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            if(units.Count ==1)
            {
                unit = units[0].Value;
                switch (unit)
                {
                    case "minutes":
                    case "minute":
                    case "mins":
                    case "min":
                        //add numerical value to total time;
                        break;
                    case "hours":
                    case "hour":
                        break;
                    case "second":
                    case "seconds":
                        break;
                    case "day":
                    case "days":
                        break;

                }
            }
            textAreaWithoutTimes = description.Replace(match.Value, "");
            times.Add(match.Value);
        }

        //https://regexr.com/69vg0
        MatchCollection servingRegularExpression = Regex.Matches(textArea, "((serves|makes) ?[1-9][0-9]? ?(to|-)? ?[1-9]?[0-9]?)|([1-9][0-9]? ?(to|-)? ?[1-9]?[0-9]? ?(servings|serving|portions|portion))", RegexOptions.Compiled | RegexOptions.IgnoreCase, new TimeSpan(10000000));
        foreach (Match match in servingRegularExpression)
        {
            //description = description.Replace(match, "");
            textAreaWithoutTimes = description.Replace(match.Value, "");
            servings.Add(match.Value);
        }

        //Go to https://regexr.com/69vqp to understand how this works
        MatchCollection methodMatchCollection = Regex.Matches(textArea, "[1-9][0-9]{0,3}\\.(\t| )[^\t\n\r]{10,500}",RegexOptions.Compiled| RegexOptions.IgnoreCase, new TimeSpan(10000000));
        foreach (Match match in methodMatchCollection)
        {
            description = description.Replace(match.Value, "");
            textAreaWithoutTimes = description.Replace(match.Value, "");
            methods.Add(Regex.Replace(match.Value, "[1-9][0-9]{0,3}\\.(\t| )", ""));
        }

        //Go to https://regexr.com/69vn4 for a break down. 
        MatchCollection ingredientsWithUnitsRegex = Regex.Matches(textArea, ingredientsSearch, RegexOptions.Compiled | RegexOptions.IgnoreCase, new TimeSpan(10000000));
        foreach (Match match in ingredientsWithUnitsRegex)
        {
            string unit = "";
            MatchCollection units = Regex.Matches(match.Value, UNITS, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            if (units.Count == 1)
            {
                unit = units[0].Value;
            }
            description = description.Replace(match.Value, "");
            textAreaWithoutTimes = description.Replace(match.Value, "");
            ingredientsWithCount.Add(match.Value);
        }

        MatchCollection ingredientsWithNumber = Regex.Matches(textAreaWithoutTimes, "[1-9][0-9]? ((?!" + UNITS +"|"+ TIMEWORDS+ ")[A-z]| |,|\\([^\r\t\\(\\)\n]{2,100}\\)|-){3,150}[a-z]", RegexOptions.Compiled, new TimeSpan(10000000));
        foreach (Match match in ingredientsWithNumber)
        {
            description= description.Replace(match.Value, "");
            ingredients.Add(match.Value);
        }
       // description = description.Replace("Ingredients", "Ingredients- download recipe for a more comprehensive view");
    }

}