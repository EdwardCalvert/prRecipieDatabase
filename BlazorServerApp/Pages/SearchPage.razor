@page "/search"
@page "/search/{searchRoute}"
@page "/"
@inject IRecipeDataLoader dataLoader
@inject NavigationManager NavManager
@using System.Web;

homepage: @homepage
<h3>SearchPage</h3>
<div style="display:flex;">
    <input type="text" class="form-control" name="x" placeholder="Search term..." @bind="searchText">
    <button class="btn btn-primary" @onclick="@ButtonClicked">🔍</button>
    @if (homepage)
    {
        <button class="btn btn-info" @onclick="@(()=>showHelpText=true)">help</button>
    }
</div>
@if (!homepage)
{
    <br />
    <p>Things you can search for...</p>
    <ul>
        <li>Ingredient, using keyword <b>ingredient</b></li>
        <li>Equipment, using keyword <b>ingredient</b></li>
        <li></li>
    </ul>
}
<div class="row">
    @if (recipes.Count > 0)
    {
        @foreach (Recipe model in recipes)
        {
            <div class="col-12 col-lg-6">

                <div class="RecipeCard">
                    <a href="/Recipe/@model.RecipeID" class="No-Decoration ">
                        <div class="card m-3">
                            <div class="card-header No-Decoration ColourBlack">
                                <h1>@model.RecipeName </h1>

                            </div>
                            <div class="card-body No-Decoration ColourBlack">
                                <p>Cooking time: @model.CookingTime minutes </p>

                                <p>Preperation time: @model.PreperationTime mintues</p>

                                <ReviewSummary DisplayReviewModel="@model.Reviews" />

                                <FoodLabel nutritionLabel="model.DisplayNutritionModel" StyleParameters="font-size: 9px; overflow-wrap: anywhere;" ShowTitle="false" />
                                @if (model.Description != null)
                                {
                                    <p>Descritption: @model.ShowShortDescription()</p>
                                }
                            </div>
                        </div>
                    </a>
                </div>

            </div>

        } }
    else
    {
        <p>Sorry- no recipes were found.</p>
    }
</div>



@code {

    string searchText { get; set; }
    List<Recipe> recipes = new List<Recipe>();

    [Parameter]
    public string searchRoute { get; set; }

    bool showHelpText = false;
    bool homepage = true;
    protected override async Task OnInitializedAsync()
    {
        homepage = !NavManager.ToBaseRelativePath(NavManager.Uri).Contains("search");
        FindRecipes();
        this.StateHasChanged();
    }

    private async void GetRecipes()
    {
        recipes = new List<Recipe>();
        List<uint> recipeIDs = await dataLoader.GetSearchDatabaseTextFields(searchText);
        foreach (uint recipeID in recipeIDs)
        {
            Recipe r = await dataLoader.GetRecipeAndTree(recipeID);
            recipes.Add(r);
        }
        this.StateHasChanged();
    }

    private async void FindRecipes()
    {
        searchText = HttpUtility.UrlDecode(searchRoute);

        if (searchText == null)
        {
            recipes = await dataLoader.GetHomepageRecipes();
        }

        else if (searchText.Length > 0)
        {
            GetRecipes();
        }
    }

    private async void ButtonClicked()
    {
        MovePage();

    }

    private async void MovePage()
    {
        //FindRecipes();
        NavManager.NavigateTo($"/search/{HttpUtility.UrlEncode(searchText)}", forceLoad: true);
    }

}

