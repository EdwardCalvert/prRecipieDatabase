@page "/search"
@page "/search/{searchRoute}/{orderByURL}/{sortByURL}"
@page "/"
@inject IRecipeDataLoader dataLoader
@inject NavigationManager NavManager
@inject IWordsAPIService wordsAPIservice
@using System.Web;
@using BlazorServerApp.Extensions
@using BlazorServerApp.WordsAPI
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering

<h3>@(homepage? "Homepage": "Search page")</h3>
<div style="display:flex;">
    <input type="text" class="form-control" name="x" placeholder="Search term..." @bind="@searchText" @onkeyup="@Enter">
    <button class="btn btn-primary" @onclick="@SearchButtonClicked">🔍</button>
    @if (homepage)
    {
        <button class="btn btn-info" @onclick="@(()=>showHelpText=true)">help</button>
    }
</div>
<div style="display:flex; margin-top:10px;">
    <p style="margin-bottom:0;">Order:</p>
    <select style="margin-left: 5px; margin-left: 5px;" @bind="@order">
        @foreach (var orderOption in Enum.GetValues(typeof(SearchEnginge.Order)))
        {
            <option value="@orderOption">@orderOption</option>
        }
    </select>
    <p style="margin-bottom: 0; margin-left: 10px;">Sort by:</p>
    <select style="margin-left: 5px; margin-left: 5px;" @bind="@sortBy">
        @foreach (var orderOption in Enum.GetValues(typeof(SearchEnginge.SortBy)))
        {
            <option value="@orderOption">@orderOption</option>
        }
    </select>
</div>
<div style="display:flex;margin:5px;">
    
    @foreach (var item in list)
    {
    <p style="margin-bottom: 0px;"><input type="checkbox" @bind="item.Selected" @onclick="(()=>handleClick(item))" />&nbsp;@item.Text&nbsp;&nbsp;</p>
    }
</div>

@foreach (var item in list.Where(x => x.Selected))
{
    <p>  @item.Text is Selected</p>
}
@code {
    MultiSelectList list = new MultiSelectList(Enum.GetValues(typeof(UserDefinedIngredient.Type)));

    private void handleClick(SelectListItem item)
    {
        //Do something crazy
        Console.WriteLine(item);
        Console.WriteLine(!item.Selected);
    }

}

@if (showHelpText)
{

    <br />
    <p>Things you can search for...</p>
    <ul>
        <li>Ingredient, using keyword <b>ingredient</b></li>
        <li>Equipment, using keyword <b>ingredient</b></li>
        <li></li>
    </ul>
}
<div class="row">
    @if (recipes.Count > 0)
    {
        @foreach (Recipe model in recipes)
        {
            <div class="col-12 col-lg-6">

                <div class="RecipeCard">
                    <a href="/Recipe/@model.RecipeID" class="No-Decoration ">
                        <div class="card m-3">
                            <div class="card-header No-Decoration ColourBlack">
                                <h1>@model.RecipeName.SentenceCase()  </h1><ReviewSummary DisplayReviewModel="@model.Reviews" />

                            </div>
                            <div class="card-body No-Decoration ColourBlack">
                                <p>Cooking time: @model.CookingTime minutes </p>

                                <p>Preperation time: @model.PreperationTime mintues</p>



                                <FoodLabel nutritionLabel="model.DisplayNutritionModel" StyleParameters="font-size: 9px; overflow-wrap: anywhere;" ShowTitle="false" />
                                @if (model.Description != null)
                                {
                                    <p>Descritption: @model.ShowShortDescription()</p>
                                }
                            </div>
                            <div class="card-footer No-Decoration ColourBlack"><p>Difficulty: @(model.Difficulty == null? "unknown":model.Difficulty);     Serves: @(model.Servings == 0?"unkown":model.Servings)</p></div>
                        </div>
                    </a>
                </div>

            </div>

        }

        @if (recipes.Count % resultsPerQuery == 0)
        {
            <btn class="btn btn-primary" @onclick="@LoadMoreRecipesOnRequest">Load more recipes</btn>
        }
    }

    else
    {
        <p>Sorry- no recipes were found.</p>
    }
</div>

<ErrorNotification ErrorMessage="An unexpected error occured while connecting to the database." Show="error"></ErrorNotification>
@code {

    string searchText { get; set; }
    List<Recipe> recipes = new List<Recipe>();


    SearchEnginge.Order _oder = SearchEnginge.Order.Descending;
    SearchEnginge.Order order
    {
        get
        {
            return _oder;
        }
        set
        {
            _oder = value;
            ReOrderResults();
        }
    }
    SearchEnginge.SortBy _sortBy = SearchEnginge.SortBy.Default;
    SearchEnginge.SortBy sortBy
    {
        get { return _sortBy; }
        set
        {
            _sortBy = value;
            ReOrderResults();
        }
    }

    [Parameter]
    public string searchRoute { get; set; }

    [Parameter]
    public string orderByURL { get; set; }

    [Parameter]
    public string sortByURL { get; set; }

    bool showHelpText = false;
    bool homepage = true;
    int offset = 0;
    int resultsPerQuery = 20;
    bool error = false;
    bool firstLoad = true;


    protected override async Task OnInitializedAsync()
    {
        if (firstLoad)
        {
            homepage = !NavManager.ToBaseRelativePath(NavManager.Uri).Contains("search");

            if (!homepage)
            {
                try
                {
                    if (orderByURL != null && sortByURL != null)
                    {
                        order = (SearchEnginge.Order)Enum.Parse(typeof(SearchEnginge.Order), orderByURL, true);
                        sortBy = (SearchEnginge.SortBy)Enum.Parse(typeof(SearchEnginge.SortBy), sortByURL, true);
                    }

                }
                catch
                {
                    order = SearchEnginge.Order.Descending;
                    sortBy = SearchEnginge.SortBy.Default;
                    error = true;
                }

            }

            await FindRecipes();
            firstLoad = false;
            this.StateHasChanged();
        }
    }

    private async Task<IEnumerable<string>> GetDieateryStyles(string text)
    {
        List<string> vs = new List<string>();
        foreach (var irration in Enum.GetValues(typeof(UserDefinedIngredient.Type)))
        {
            Console.WriteLine(irration);
            vs.Add(irration.ToString());
        }

        return await Task.FromResult(vs);
    }

    private async Task FindRecipes()
    {
        try
        {
            searchText = HttpUtility.UrlDecode(searchRoute);

            if (searchText == null)
            {
                await GetHomepageRecipes();

            }

            else if (searchText.Length > 0)
            {
                recipes.AddRange(await SearchEnginge.SearchForRecipes(dataLoader, searchText, wordsAPIservice, offset));

                ReOrderResults();
            }
            error = false;
        }
        catch
        {
            error = true;
        }
    }

    private async void SearchButtonClicked()
    {
        await Task.Run(() => MovePage());

    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SearchButtonClicked();
        }
        //else if(char.IsLetterOrDigit(e.Key))
        //{
        //searchText += e.Key;

    }

    private async Task GetHomepageRecipes()
    {
        try
        {
            List<Recipe> resultsFromDB = await dataLoader.GetHomepageRecipes(offset);
            offset += resultsFromDB.Count;
            recipes.AddRange(resultsFromDB);
            ReOrderResults();
            error = false;
        }
        catch
        {
            error = true;
        }
    }

    private async Task LoadMoreRecipesOnRequest()
    {
        await Task.Run(() => GetHomepageRecipes());
    }

    private void MovePage()
    {
        NavManager.NavigateTo($"/search/{HttpUtility.UrlEncode(searchText)}/{HttpUtility.UrlEncode(order.ToString())}/{HttpUtility.UrlEncode(sortBy.ToString())}", forceLoad: true);

    }

    private void ReOrderResults()
    {
        recipes = MergeSort.RecipeMergeSort(recipes, sortBy, order);
    }

}

