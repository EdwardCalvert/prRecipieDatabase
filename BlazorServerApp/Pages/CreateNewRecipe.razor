@page "/createRecipe"
@inherits RecipeDataLoader
<h3>CreateNewRecipe</h3>
<table cellspacing="0" id="NewRecipeForm" style="width:100%;border-collapse:collapse;">
    <tbody>
        <tr>
            <td colspan="2">
                <EditForm Model="@newRecipe" OnValidSubmit="@InsertRecipe">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="FieldLine">
                        <div class="FieldHeader">
                            <label id="recipeNameLabel">Recipe Name*</label>
                        </div>
                        <div class="FieldData">
                            <InputText style=" width:100%;" id="recipeNameInput" @bind-Value="newRecipe.RecipeName" />
                        </div>
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="recipeDescriptionLabel">Recipe Description*</label></div>
                        <div class="FieldData"><InputTextArea style="width: 100%;" id="recipeDescriptionInput" @bind-Value="newRecipe.Description" /></div>
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="recipeIngredientsLabel">Ingredients* </label></div>
                        <div class="container">
                            <div class="row row-cols-1">

                                @for (int i = 0; i < newRecipe.Ingredients.Count; i++)
                                {
                                    DisplayIngredientModel copyOfIngredient = newRecipe.Ingredients[i];
                                    <div class="col" style="flex-basis: unset;">
                                        <div class="FieldData">
                                            <div class="InputFieldContainer">
                                                <InputNumber id="@("recipePreparationTimeInput" + i)" class="TimeInputField" @bind-Value="@copyOfIngredient.Quantity" />
                                            </div>
                                            <div class="InputFieldContainer">
                                                <InputSelect id="@("recipieIngredientsQuanity" + i)" @bind-Value="copyOfIngredient.Unit">
                                                    @foreach (var value in DisplayRecipeModel.SUPPORTEDUNITS)
                                                        {
                                                        <option>@value</option>
                                                        }
                                                </InputSelect>
                                            </div>
                                            <div class="InputFieldContainer">
                                                <input class="TextBox" id="@("recipeIngredientsInput" + i)" @bind-value="@copyOfIngredient.Name" />
                                            </div>
                                            <div class="FieldLine">
                                                <button class="btn btn-danger" @onclick="@(e=>DeleteIngredient(i-1))">✕</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                                @if (newRecipe.Ingredients.Count >= DisplayRecipeModel.INGREDIENTSCAPACITY)
                                {
                                    <p class="alert-danger">Sorry, you can't add any more rows</p>
                                    <ErrorNotification ErrorMessage="@($"You can't add any more rows. Only a dominos pizza needs more than {DisplayRecipeModel.INGREDIENTSCAPACITY} rows! ")" />

                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="IncrementCount">Add Ingredient</button>}
                            </div>

                        </div>
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="EquipmentLable">Equipment* </label></div>
                        <div class="container">
                            <div class="row row-cols-1">
                                @for (int i = 0; i < newRecipe.Equipment.Count; i++)
                                {
                                    DisplayEquipmentModel copyOfEquipment = newRecipe.Equipment[i];
                                    <div class="col" style="flex-basis: unset;">
                                        <div class="FieldData">
                                            <div class="InputFieldContainer">
                                                <InputText id="@($"EquipmentInputBox{i}")" @bind-Value="@copyOfEquipment.Name" />
                                                
                                            </div>
                                            <div class="FieldLine">
                                                <button class="btn btn-danger" @onclick="@(e=>DeleteEquipment(i-1))">✕</button>
                                            </div>
                                        </div>
                                    </div>
                                }


                                @if (newRecipe.Equipment.Count >= DisplayRecipeModel.EQUIPMENTCAPACITY)
                                {
                                    <p class="alert-danger">Sorry, you can't add any more rows</p>
                                    <ErrorNotification ErrorMessage="@($"You can't add any more rows. Only a car would need more than {DisplayRecipeModel.EQUIPMENTCAPACITY} pieces of equipment!  ")" />

                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="AddEquipment">Add Equipment</button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="MethodLabel">Method* </label></div>
                        <ol>
                            @for (int i = 0; i < newRecipe.Method.Count; i++)
                            {
                                DisplayMethodModel copyOfMethod = newRecipe.Method[i];
                                <li>

                                    <div class="FieldData">
                                        <div class="InputFieldContainer">
                                            <InputText class="" style="width: 400px; max-width: unset;" id="@($"EquipmentInputBox{i}")" @bind-Value="@copyOfMethod.Step" />
                                        </div>
                                        <div class="FieldLine">
                                            <button class="btn btn-danger" @onclick="@(e=>DeleteStep(i-1))">✕</button>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ol>
                        @if (newRecipe.Method.Count >= DisplayRecipeModel.METHODCAPACITY)
                        {
                            <p class="alert-danger">Sorry, you can't add any more rows</p>
                            <ErrorNotification ErrorMessage="@($"You can't add any more rows. Only a skyscraper would need more than {DisplayRecipeModel.METHODCAPACITY} instructions! Remove some and try again. ")" />

                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="AddMethod">Add Instruction</button>
                        }
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="recipeServingsLabel">Servings </label></div>
                        <div class="FieldData"><InputNumber id="recipeServingsInput" class="QuantityInputField" @bind-Value="newRecipe.Servings" /></div>
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="recipeCookingTimeLabel">Cooking Time </label></div>
                        <div class="FieldData">
                            <div class="InputFieldContainer"><InputNumber id="recipeCookingTimeInput" class="TimeInputField" @bind-Value="newRecipe.CookingTime" /></div>
                            <div class="InputLabelContainer"><p>Minutes</p></div>
                        </div>

                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="recipePreparationTimeLabel">Preperation Time </label></div>
                        <div class="FieldData"><div class="InputFieldContainer"><InputNumber id="recipePreparationTimeInput" class="TimeInputField" @bind-Value="newRecipe.PreperationTime" /></div><div class="InputLabelContainer"><p>Minutes</p></div></div>
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="recipeMealTypeLabel">Meal Type </label></div>
                        <div class="FieldData">
                            <InputSelect id="recipeMealTypeInput" @bind-Value="newRecipe.MealType">
                                @foreach (var value in Enum.GetValues(typeof(DisplayRecipeModel.mealType)))
                                {
                                    <option>@value</option>
                                }
                            </InputSelect>

                        </div>
                    </div>
                    <div class="FieldLine">
                        <div class="FieldHeader"><label id="difficultySetterLabel">Difficulty </label></div>
                        <div class="InputFieldContainer">
                            <InputSelect id="difficultySetterInput" @bind-Value="newRecipe.Difficulty">
                                @foreach (var value in DisplayRecipeModel.DIFICULTY)
                                {
                                    <option>@value</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="FormViewFieldLineSpacer"></div>
                    @try
                    {
                    <button type="submit" class="btn btn-primary">Submit</button>
                    }
                catch(Exception e)
                {
                    <ErrorNotification ErrorMessage="@e.Message"/>
                }
                </EditForm>
            </td>
        </tr>
    </tbody>
</table>
    @code {
        private DisplayRecipeModel newRecipe = new DisplayRecipeModel();

        private async Task InsertRecipe()

        {
            await InsertRecipeAndRelatedFields(newRecipe);
           

            newRecipe = new();
            await OnInitializedAsync();
        }

        protected override Task OnInitializedAsync()
        {
            newRecipe.InsertEmptyIngredient(3);
            newRecipe.InsertEmptyEquipment(2);
            newRecipe.InsertEmptyMethod(5);

            return base.OnInitializedAsync();
        }

        private void DeleteIngredient(int index)
        {
            newRecipe.Ingredients.RemoveAt(index);
        }

        private void DeleteEquipment(int index)
        {
            newRecipe.Equipment.RemoveAt(index);
        }

        private void DeleteStep(int index)
        {
            newRecipe.Method.RemoveAt(index);
        }

        private void IncrementCount()
        {
            if (newRecipe.Ingredients.Count != DisplayRecipeModel.INGREDIENTSCAPACITY)
            {
                newRecipe.InsertEmptyIngredient(2);

            }
        }

        private void AddEquipment()
        {
            newRecipe.InsertEmptyEquipment();
        }

        private void AddMethod()
        {
            newRecipe.InsertEmptyMethod();
        }


    }
