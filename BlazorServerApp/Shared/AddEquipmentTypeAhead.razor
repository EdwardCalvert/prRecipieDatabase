@inherits RecipeDataLoader
<BlazoredTypeahead SearchMethod="SearchEquipment"
                   @bind-Value="_selectedEquipment">
    <SelectedTemplate>
        @context.EquipmentName
    </SelectedTemplate>
    <ResultTemplate>
        @context.EquipmentName (@context.TypeOf)
        
    </ResultTemplate>
</BlazoredTypeahead>

@if (_selectedEquipment != null)
{
    <p>You selected: @_selectedEquipment.EquipmentName</p>
}

@code {

    //[Parameter]
    //public DisplayEquipmentModel SelectedEquipment
    //{
    //    get => _selectedEquipment; set
    //    {
    //        if (value !=null && _selectedEquipment !=null && value.EquipmentName == _selectedEquipment.EquipmentName && value.EquipmentID == _selectedEquipment.EquipmentID && value.TypeOf == _selectedEquipment.TypeOf) { return; }
    //        _selectedEquipment = value;
    //        SelectedEquipmentChanged.InvokeAsync(value);
    //    }
    //}

    [Parameter]
    public string EquipmentName
    {
        get => _selectedEquipment.EquipmentName; set
        {
            ChangeEquipmentName(value);
        }
    }

    private void ChangeEquipmentName(string newName)
    {
        if (newName != null)
        {
            _selectedEquipment.EquipmentName = newName;
            EquipmentNameChanged.InvokeAsync(newName);

        }
    }

    [Parameter]
    public EventCallback<string> EquipmentNameChanged { get; set; }

    [Parameter]
    public EventCallback<DisplayEquipmentModel> SelectedEquipmentChanged { get; set; }


    private async Task<IEnumerable<DisplayEquipmentModel>> SearchEquipment(string searchText)
    {
        return await FindEquipmentLike(searchText);
    }

    private DisplayEquipmentModel _selectedEquipment;

}