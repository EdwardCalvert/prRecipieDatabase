@using DataLibrary
@using BlazorServerApp.Shared
@using BlazorServerApp.Models
@using Microsoft.Extensions.Configuration
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject RecipeDataLoader dataLoader
@inherits FileUpload


<h5>Bulk upload Ingredients from CSV</h5>
<form @onsubmit="SubmitAsync">
    <InputFile OnChange="OnInputFileChange" ShowCustomButton="true" ButtonText="Start" AllowedExtensions=".csv;" FilterByExtension="true" MaxFileSize=@largestFileSize CustomExtensionMessage="Only .csv is supported." CustomButtonClassName="btn-primary" multiple />
    <br />
    @if (selectedFiles != null && selectedFiles.Count > 0 && !spinning)
    {


        <p>Enable deduplication? (Only turn off if you are sure that the data isn't allready in DB)</p>
        <ToggleSwitch Id="mySwitch" OnToggle="((isChecked) => Toggle(isChecked))" SetAsChecked="isChecked" />
        <button type="submit" class="btn btn-primary">Upload Selected File(s) to the Ingredients Table</button>
    }
    else if (!spinning)
    {

        <p>Enable deduplication? (Only turn off if you are sure that the data isn't allready in DB)</p>
        <ToggleSwitch Id="mySwitch" OnToggle="((isChecked) => Toggle(isChecked))" SetAsChecked="isChecked" />
    }
    else
    {

        <LoadingElement></LoadingElement>
        <p>Please be patient. Ingredients are being loaded to the database.</p>
        <p>Progress: @InsertPercent %</p>
        <ProgressBar Percent="@InsertPercent" />
    }
</form>
@if (Error )
{
    <ErrorNotification ErrorMessage="@Message" />
}

@code {




    private async Task SubmitIngredients()
    {
        try
        {
            double count = 0;
            foreach (var file in selectedFiles)
            {

                if (file.Size > largestFileSize)
                {
                    throw new Exception("The file you uploaded was too large");

                }
                else if (Path.GetExtension(file.Name) != ".csv")
                {
                    throw new Exception("Please only upload csv files");
                }
                else
                {
                    string csvData;
                    using (StreamReader streamReader = new StreamReader(file.OpenReadStream(largestFileSize)))
                    {
                        csvData = await streamReader.ReadToEndAsync();
                    }
                    string[] lines = csvData.Split(Environment.NewLine);
                    foreach (string line in lines)
                    {
                        await dataLoader.InsertIngredientIntoDB(line, isChecked);
                        InsertPercent = (int)((count / lines.Count()) * 100);
                        count++;
                        this.StateHasChanged();
                    }
                }
            }


            Message = $"{selectedFiles.Count} file(s) uploaded on server";
            Error = false;

        }
        catch (NullReferenceException)
        {
            Message = "Sorry, please attach some files!";
            Error = true;
        }
        catch (Exception e)
        {
            Message = "Error encoundtered:" + e.Message;
            Error = true;
        }
    }



    public async Task SubmitAsync()    // this is an async task
    {
        spinning = true;
        await Task.Delay(1);      // flushing changes. The trick!!
        await SubmitIngredients();               // non-async code
        spinning = false;
        await Task.Delay(1);      // changes are flushed again
    }


}
