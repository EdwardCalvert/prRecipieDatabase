@inherits Models.RecipeDataLoader
<div class="ReviewCard">


    @if (Reviews.Count > 0)
    {
        <ReviewSummary DisplayReviewModel="Reviews" />
        @foreach (Review displayReviewModel in Reviews)
        {
            <div class="card m-3">
                <div class="card-header No-Decoration ColourBlack">
                    <p>@displayReviewModel.ReviewersName on the @displayReviewModel.DateSubmitted.ToString("d") said : </p><h3>@displayReviewModel.ReviewTitle (@displayReviewModel.Star.GetStarsForUI())</h3>
                </div>
                <div class="card-body No-Decoration ColourBlack">
                    @displayReviewModel.ReviewText
                </div>
            </div>
        }
    }
    <EditForm Model="@newReview" OnValidSubmit="@InsertNewRecipe">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="FieldLine">
            <div class="FieldHeader">
                <label id="reviewTitleLabel">ReviewTitle</label>
            </div>
            <div class="col-12 col-xs-8 col-md-6 col-lg-4 FieldData">
                <InputText style="width: 100%" id="reviewTitleInput" @bind-Value="newReview.ReviewTitle" />
            </div>

        </div>
        <div class="FieldLine">
            <div class="FieldHeader">
                <label id="reviewRatingTitle">Your Rating</label>
            </div>
            <div class="FieldData">
                <div class="InputFieldContainer">
                    <InputSelect id="reviewRatingSelector" @bind-Value="StarCount">
                        @foreach (var value in Star.Stars)
                        {
                            <option value="@value.Key">@value.Value</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </div>
        <div class="FieldLine">
            <div class="FieldHeader">
                <label id="recipeNameLabel">Your name</label>
            </div>
            <div class="col-12 col-xs-8 col-md-6 col-lg-4 FieldData">
                <InputText style="width:100%" id="reviewerNameInput" @bind-Value="newReview.ReviewersName" />
            </div>

        </div>
        <div class="FieldLine">
            <div class="FieldHeader">
                <label id="recipeNameLabel">ReviewText</label>
            </div>
            <div class="FieldData">
                <InputTextArea rows="6" style=" width:100%;" id="reviewText" @bind-Value="newReview.ReviewText" />
            </div>

        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>
@code {
    [Parameter]
    public List<Review> Reviews { get; set; }
    [Parameter]
    public uint RecipeID { get; set; }

    private Review newReview = new Review();
    private int StarCount { get; set; }



    protected override async Task OnInitializedAsync()
    {
        newReview.RecipeID = RecipeID;
        await UpdateReviews();
        await base.OnInitializedAsync();
    }

    private async Task InsertNewRecipe()
    {
        newReview.Star = Star.CreateStar(StarCount);
        newReview.DateSubmitted = DateTime.Now;
        newReview.RecipeID = RecipeID;
        await SaveNewReview(newReview);

        newReview = new Review();

        await UpdateReviews();
    }

    private async Task UpdateReviews()
    {
        Reviews = await GetReviews(RecipeID);
    }



}
